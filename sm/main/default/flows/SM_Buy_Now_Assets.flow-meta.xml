<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>If the call to the Payment Sale API is successful, apply the payment to the invoice.</description>
        <name>ApplyPaymentToInvoice</name>
        <label>Apply Payment to Invoice</label>
        <locationX>2603</locationX>
        <locationY>910</locationY>
        <actionName>applyPayment</actionName>
        <actionType>applyPayment</actionType>
        <connector>
            <targetReference>SendCompletedEmail</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>amount</name>
            <value>
                <elementReference>IterateOverInvoices.Balance</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>appliedToId</name>
            <value>
                <elementReference>IterateOverInvoices.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentId</name>
            <value>
                <elementReference>PaymentCreationEvent.PaymentId</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Call the Payment Sale API. Charge the amount on the invoice to the payment method.</description>
        <name>ChargePaymentMethod</name>
        <label>Charge Payment Method</label>
        <locationX>2434</locationX>
        <locationY>669</locationY>
        <actionName>paymentSale</actionName>
        <actionType>paymentSale</actionType>
        <connector>
            <targetReference>WaitForPaymentCreationEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>amount</name>
            <value>
                <elementReference>IterateOverInvoices.Balance</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>currencyIsoCode</name>
            <value>
                <elementReference>order.CurrencyIsoCode</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentGatewayId</name>
            <value>
                <elementReference>GatewayId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentMethodId</name>
            <value>
                <elementReference>paymentMethodId</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>Create_Asset_from_Order</name>
        <label>Create Asset from Order</label>
        <locationX>1454</locationX>
        <locationY>412</locationY>
        <actionName>createOrUpdateAssetFromOrder</actionName>
        <actionType>createOrUpdateAssetFromOrder</actionType>
        <connector>
            <targetReference>Wait_for_Asset_Created</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>orderId</name>
            <value>
                <elementReference>orderOutput.Id</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Create the billing schedule for the order products.</description>
        <name>CreateBillingSchedulesfromOrderProducts</name>
        <label>Create Billing Schedules from Order Products</label>
        <locationX>1104</locationX>
        <locationY>460</locationY>
        <actionName>createBillingScheduleFromOrderItem</actionName>
        <actionType>createBillingScheduleFromOrderItem</actionType>
        <connector>
            <targetReference>WaitForBillingScheduleCreatedEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>orderItemIds</name>
            <value>
                <elementReference>OrderItemsIds</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Create the invoice for the billing schedules.</description>
        <name>CreateInvoice</name>
        <label>Create Invoice</label>
        <locationX>1755</locationX>
        <locationY>458</locationY>
        <actionName>createInvoiceFromOrder</actionName>
        <actionType>createInvoiceFromOrder</actionType>
        <connector>
            <targetReference>WaitForInvoiceProcessedEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>invoiceDate</name>
            <value>
                <elementReference>order.EffectiveDate</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>invoiceStatus</name>
            <value>
                <stringValue>Posted</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>orderId</name>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetDate</name>
            <value>
                <elementReference>order.EffectiveDate</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing all the errors from the billing schedule events.</description>
        <name>SendBillingScheduleErrorEmail</name>
        <label>Send Billing Schedule Error Email</label>
        <locationX>1499</locationX>
        <locationY>1125</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>BillingScheduleErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email indicating that the transaction is complete.</description>
        <name>SendCompletedEmail</name>
        <label>Send Completed Email</label>
        <locationX>2603</locationX>
        <locationY>677</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>IterateOverInvoices</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateCompleted</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>SmartBytes Buy Now completed</stringValue>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing the invoice error information.</description>
        <name>SendInvoiceErrorEmail</name>
        <label>Send Invoice Error Email</label>
        <locationX>2155</locationX>
        <locationY>1297</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>InvoiceErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing error information about the payment sale.</description>
        <name>SendPaymentSaleErrorEmail</name>
        <label>Send Payment Sale Error Email</label>
        <locationX>2750</locationX>
        <locationY>467</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>IterateOverInvoices</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>PaymentSaleErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <apiVersion>53.0</apiVersion>
    <assignments>
        <description>Add the error message records to the collection variable.</description>
        <name>CollectErrorMessage</name>
        <label>Collect Error Messages</label>
        <locationX>1937</locationX>
        <locationY>1290</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>InvoiceErrorCollection</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrors</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the error message records to the collection variable.</description>
        <name>CollectErrorMessages</name>
        <label>Collect Error Messages</label>
        <locationX>1351</locationX>
        <locationY>924</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>BillingScheduleErrorCollection</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverBillingScheduleEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice error detail event records to the collection variable.</description>
        <name>CollectInvoiceErrorDetailEvent</name>
        <label>Collect Invoice Error Detail Event</label>
        <locationX>1741</locationX>
        <locationY>1279</locationY>
        <assignmentItems>
            <assignToReference>InvoiceErrors</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverInvoiceErrorDetailEvents.InvoiceErrorDetailEvents</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrorDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice header error records to the collection variable.</description>
        <name>CollectInvoiceHeaderErrors</name>
        <label>Collect Invoice Header Errors</label>
        <locationX>1749</locationX>
        <locationY>820</locationY>
        <assignmentItems>
            <assignToReference>InvoiceErrors</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>InvoiceProcessedEvent.InvoiceErrorDetailEvent</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CollectInvoiceProcessedDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice processed detail events to the collection variable.</description>
        <name>CollectInvoiceProcessedDetailEvents</name>
        <label>Collect Invoice Processed Detail Events</label>
        <locationX>1896</locationX>
        <locationY>819</locationY>
        <assignmentItems>
            <assignToReference>InvoiceProcessedDetailEvent</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>InvoiceProcessedEvent.InvoiceProcessedDetailEvents</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrorDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the order product records to the collection variable.</description>
        <name>CollectOrderProductIDs</name>
        <label>Collect Order Product IDs</label>
        <locationX>914</locationX>
        <locationY>932</locationY>
        <assignmentItems>
            <assignToReference>OrderItemsIds</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOrderProductsGetID.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOrderProductsGetID</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the order product records to the collection variable.</description>
        <name>CollectOrderProducts</name>
        <label>Collect Order Products</label>
        <locationX>632</locationX>
        <locationY>670</locationY>
        <assignmentItems>
            <assignToReference>OrderItemsToBeCreated</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOrderProductsAdd</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOrderProductsAdd</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyBillingScheduleError</name>
        <label>Set Email Body</label>
        <locationX>1499</locationX>
        <locationY>923</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>BillingScheduleErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendBillingScheduleErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyInvoiceError</name>
        <label>Set Email Body</label>
        <locationX>2155</locationX>
        <locationY>1035</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>InvoiceErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendInvoiceErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyPaymentSaleError</name>
        <label>Set Email Body</label>
        <locationX>2750</locationX>
        <locationY>690</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentSaleErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendPaymentSaleErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the EmailErrorDetails variable which is used in the email template.</description>
        <name>SetEmailErrorDetailsPaymentSale</name>
        <label>Set Email Error Details</label>
        <locationX>2750</locationX>
        <locationY>915</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentCreationEvent.ErrorMessage</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SetEmailBodyPaymentSaleError</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the order ID and the order number to the order product.</description>
        <name>SetOrderIDOnOrderProduct</name>
        <label>Set Order ID on Order Product</label>
        <locationX>488</locationX>
        <locationY>670</locationY>
        <assignmentItems>
            <assignToReference>IterateOverOrderProductsAdd.OrderId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CollectOrderProducts</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Required. Set the ID of the payment gateway provider to use for this transaction.</description>
        <name>SetPaymentGatewayID</name>
        <label>Set Payment Gateway ID</label>
        <locationX>296</locationX>
        <locationY>256</locationY>
        <assignmentItems>
            <assignToReference>GatewayId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>paymentGatewayId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CreateOrder</targetReference>
        </connector>
    </assignments>
    <decisions>
        <description>Determine whether an error occurred during the creation of the billing schedule.</description>
        <name>BillingScheduleErrorCheck</name>
        <label>Billing Schedule Has Error?</label>
        <locationX>1491</locationX>
        <locationY>680</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>BillingScheduleSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CreateInvoice</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>BillingScheduleErrorExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetEmailBodyBillingScheduleError</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the billing schedule.</description>
        <name>BillingScheduleHasError</name>
        <label>Has Error?</label>
        <locationX>1245</locationX>
        <locationY>1071</locationY>
        <defaultConnector>
            <targetReference>IterateOverBillingScheduleEvents</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>BillingScheduleContainsError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverBillingScheduleEvents.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CollectErrorMessages</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the invoice.</description>
        <name>InvoiceHasError</name>
        <label>Invoice Has Error?</label>
        <locationX>1885</locationX>
        <locationY>678</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>InvoiceSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>InvoiceProcessedEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetInvoiceRecords</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>InvoiceError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>InvoiceProcessedEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CollectInvoiceHeaderErrors</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the payment sale.</description>
        <name>PaymentSaleErrorCheck</name>
        <label>Has Error?</label>
        <locationX>2518</locationX>
        <locationY>1149</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>PaymentSaleSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>PaymentCreationEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ApplyPaymentToInvoice</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>PaymentSaleError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>PaymentCreationEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetEmailErrorDetailsPaymentSale</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <formulas>
        <description>Collects billing schedule errors.</description>
        <name>BillingScheduleErrorCollection</name>
        <dataType>String</dataType>
        <expression>{!EmailErrorDetails} &amp; {!IterateOverBillingScheduleEvents.ErrorMessage}</expression>
    </formulas>
    <formulas>
        <description>Email body for billing schedule error case.</description>
        <name>BillingScheduleErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;The following errors prevented Salesforce Billing from completing order &quot; + {!orderOutput.OrderNumber}</expression>
    </formulas>
    <formulas>
        <description>Email subject for billing schedule error case.</description>
        <name>BillingScheduleErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Billing order &quot; + {!orderOutput.OrderNumber} + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <formulas>
        <description>Collects invoice errors.</description>
        <name>InvoiceErrorCollection</name>
        <dataType>String</dataType>
        <expression>{!EmailErrorDetails} &amp; {!IterateOverInvoiceErrors.ErrorMessage}</expression>
    </formulas>
    <formulas>
        <description>Email body for invoice error case.</description>
        <name>InvoiceErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce invoice contains error&quot;</expression>
    </formulas>
    <formulas>
        <description>Email subject for invoice error case.</description>
        <name>InvoiceErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce invoice contains errors&quot;</expression>
    </formulas>
    <formulas>
        <description>Email body for payment sale error case.</description>
        <name>PaymentSaleErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Payment Sale for invoice &quot; + {!IterateOverInvoices.DocumentNumber}  + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <formulas>
        <description>Email subject for payment sale error case.</description>
        <name>PaymentSaleErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Payment Sale for Invoice &quot; + {!IterateOverInvoices.InvoiceNumber} + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <interviewLabel>[SM] Buy Now - Assets {!$Flow.CurrentDateTime}</interviewLabel>
    <label>[SM] Buy Now - Assets</label>
    <loops>
        <description>Loop through the event detail records for the Billing Schedule Created Event. Check for errors and other messages.</description>
        <name>IterateOverBillingScheduleEvents</name>
        <label>Iterate Over Billing Schedule Events</label>
        <locationX>1256</locationX>
        <locationY>680</locationY>
        <collectionReference>BillingScheduleCreatedEvent.BillingScheduleCreatedEventDetail</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>BillingScheduleHasError</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>BillingScheduleErrorCheck</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the invoice error detail event records.</description>
        <name>IterateOverInvoiceErrorDetailEvents</name>
        <label>Iterate Over Invoice Error Detail Events</label>
        <locationX>1741</locationX>
        <locationY>1031</locationY>
        <collectionReference>InvoiceProcessedDetailEvent</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectInvoiceErrorDetailEvent</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>IterateOverInvoiceErrors</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the list of invoice errors and collect the error messages into a single variable.</description>
        <name>IterateOverInvoiceErrors</name>
        <label>Iterate Over Invoice Errors</label>
        <locationX>1935</locationX>
        <locationY>1030</locationY>
        <collectionReference>InvoiceErrors</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectErrorMessage</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>SetEmailBodyInvoiceError</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the list of invoices and create the payment sale records.</description>
        <name>IterateOverInvoices</name>
        <label>Iterate Over Invoices</label>
        <locationX>2441</locationX>
        <locationY>467</locationY>
        <collectionReference>GetInvoiceRecords</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>ChargePaymentMethod</targetReference>
        </nextValueConnector>
    </loops>
    <loops>
        <description>Loop through the list of order products and add them to the order.</description>
        <name>IterateOverOrderProductsAdd</name>
        <label>Iterate Over Order Products</label>
        <locationX>567</locationX>
        <locationY>458</locationY>
        <collectionReference>orderItems</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>SetOrderIDOnOrderProduct</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>CreateOrderProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the order products and copy the order product ID to a new variable.</description>
        <name>IterateOverOrderProductsGetID</name>
        <label>Iterate Over Order Products</label>
        <locationX>910</locationX>
        <locationY>681</locationY>
        <collectionReference>OrderItemsToBeCreated</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectOrderProductIDs</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>CreateBillingSchedulesfromOrderProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <description>Create an application usage assignments record for this transaction.</description>
        <name>CreateBuyNowAppTagForOrder</name>
        <label>Create Buy Now App Tag For Order</label>
        <locationX>304</locationX>
        <locationY>675</locationY>
        <connector>
            <targetReference>GetOrderOutputFields</targetReference>
        </connector>
        <inputAssignments>
            <field>AppUsageType</field>
            <value>
                <stringValue>BuyNow</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RecordId</field>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </inputAssignments>
        <object>AppUsageAssignment</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <description>Create the order record for this transaction.</description>
        <name>CreateOrder</name>
        <label>Create Order</label>
        <locationX>296</locationX>
        <locationY>462</locationY>
        <connector>
            <targetReference>CreateBuyNowAppTagForOrder</targetReference>
        </connector>
        <inputReference>order</inputReference>
    </recordCreates>
    <recordCreates>
        <description>Create the order product records. The order products are related to the order.</description>
        <name>CreateOrderProducts</name>
        <label>Create Order Products</label>
        <locationX>757</locationX>
        <locationY>456</locationY>
        <connector>
            <targetReference>ActivateOrder</targetReference>
        </connector>
        <inputReference>OrderItemsToBeCreated</inputReference>
    </recordCreates>
    <recordLookups>
        <description>Get the invoice records.</description>
        <name>GetInvoiceRecords</name>
        <label>Get Invoice Records</label>
        <locationX>2041</locationX>
        <locationY>467</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>IterateOverInvoices</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ReferenceEntityId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Invoice</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get the order ID and the order number from the order that was created.</description>
        <name>GetOrderOutputFields</name>
        <label>Get Order Output Fields</label>
        <locationX>434</locationX>
        <locationY>458</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>IterateOverOrderProductsAdd</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </filters>
        <object>Order</object>
        <outputReference>orderOutput</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>OrderNumber</queriedFields>
    </recordLookups>
    <recordUpdates>
        <description>Activate the order.</description>
        <name>ActivateOrder</name>
        <label>Activate Order</label>
        <locationX>902</locationX>
        <locationY>456</locationY>
        <connector>
            <targetReference>IterateOverOrderProductsGetID</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>order.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Activated</stringValue>
            </value>
        </inputAssignments>
        <object>Order</object>
    </recordUpdates>
    <sourceTemplate>revenue_buynow__BuyNow</sourceTemplate>
    <start>
        <locationX>170</locationX>
        <locationY>45</locationY>
        <connector>
            <targetReference>SetPaymentGatewayID</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <textTemplates>
        <description>Email body for when Buy Now completes without error.</description>
        <name>EmailTemplateCompleted</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;Your order has been placed successfully.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;Details:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;Order Number: &lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;{!orderOutput.OrderNumber}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;Invoice Number: {!IterateOverInvoices.DocumentNumber}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;Your payment of $&lt;/span&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt;{!IterateOverInvoices.Balance} &lt;/span&gt;&lt;span style=&quot;font-size: 14px; color: rgb(0, 0, 0);&quot;&gt;was successful.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Email body for when Buy Now has an error.</description>
        <name>EmailTemplateError</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Hello, {!$User.FirstName} {!$User.LastName},&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;{!EmailErrorBody}&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;{!EmailErrorDetails}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;You’re registered as {!$User.Username} in {!$Organization.Name}. Questions? Need help? Contact Salesforce Customer Support. &amp;lt;&lt;/span&gt;&lt;a href=&quot;https://help.salesforce.com/mysuccesshub?id=solutionFinder&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;https://help.salesforce.com/mysuccesshub?id=solutionFinder&lt;/a&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <variables>
        <name>BillingScheduleCreatedEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>BillingScheduleCreatedEvent</objectType>
    </variables>
    <variables>
        <name>EmailErrorBody</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>EmailErrorDetails</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>GatewayId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>InvoiceErrors</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceErrorDetailEvent</objectType>
    </variables>
    <variables>
        <name>InvoiceProcessedDetailEvent</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceProcessedDetailEvent</objectType>
    </variables>
    <variables>
        <name>InvoiceProcessedEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceProcessedEvent</objectType>
    </variables>
    <variables>
        <name>order</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>Order</objectType>
    </variables>
    <variables>
        <name>orderItems</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>OrderItem</objectType>
    </variables>
    <variables>
        <name>OrderItemsIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>OrderItemsToBeCreated</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OrderItem</objectType>
    </variables>
    <variables>
        <name>orderOutput</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Order</objectType>
    </variables>
    <variables>
        <name>PaymentCreationEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>PaymentCreationEvent</objectType>
    </variables>
    <variables>
        <name>paymentGatewayId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>paymentMethodId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <waits>
        <name>Wait_for_Asset_Created</name>
        <label>Wait for Asset Created</label>
        <locationX>1397</locationX>
        <locationY>564</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>Assets_Success</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>IterateOverBillingScheduleEvents</targetReference>
            </connector>
            <eventType>CreateAssetOrderEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>Create_Asset_from_Order.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Assets Success</label>
        </waitEvents>
    </waits>
    <waits>
        <description>Billing schedule creation is asynchronous. Wait until the Flow receives the Billing Schedule Created event, which indicates that Salesforce finished processing the billing schedule request.</description>
        <name>WaitForBillingScheduleCreatedEvent</name>
        <label>Wait For Billing Schedule Created Event</label>
        <locationX>1259</locationX>
        <locationY>460</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>BillingScheduleComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>Create_Asset_from_Order</targetReference>
            </connector>
            <eventType>BillingScheduleCreatedEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>CreateBillingSchedulesfromOrderProducts.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>BillingScheduleCreatedEvent</assignToReference>
                <name>BillingScheduleCreatedEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
    <waits>
        <description>Invoice processing is asynchronous. Wait until the Flow receives the Invoice Processed event, which indicates that Salesforce finished processing the invoice creation request.</description>
        <name>WaitForInvoiceProcessedEvent</name>
        <label>Wait For Invoice Processed Event</label>
        <locationX>1892</locationX>
        <locationY>458</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>InvoiceComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>InvoiceHasError</targetReference>
            </connector>
            <eventType>InvoiceProcessedEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>CreateInvoice.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>InvoiceProcessedEvent</assignToReference>
                <name>InvoiceProcessedEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
    <waits>
        <description>Creating the payment is an asynchronous process. Wait until the Flow receives the Payment Creation event, which indicates that Salesforce finished processing the payment request.</description>
        <name>WaitForPaymentCreationEvent</name>
        <label>Wait For Payment Creation Event</label>
        <locationX>2434</locationX>
        <locationY>899</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>PaymentSaleComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>PaymentSaleErrorCheck</targetReference>
            </connector>
            <eventType>PaymentCreationEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>ChargePaymentMethod.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>PaymentCreationEvent</assignToReference>
                <name>PaymentCreationEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
</Flow>
